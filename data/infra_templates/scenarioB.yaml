# this is the legacy template format that we've been using to specify simulation infra

# this is basically 1 VM per host and 1 cloudlet per host/vm. 100 hosts and 100 cloudlets, so everything running in parallel

# workload length is -1, so all run continuously until they are interrupted on the 1 hour mark

hostSpecification:
  hosts: 100
  host_pes: 16
  host_mips: 1000
  host_ram: 2048
  host_bw: 10_000
  host_storage: 1_000_000

vmSpecification:
  vms: 100
  vm_pes: 16
  vm_mips: 1000
  vm_ram: 2048
  vm_bw: 1000
  vm_storage: 10_000

# note - some cloudlet configuration is independent of the abstracted app type
# the number of cloudlets will generally match the available hardware (for parallel processing)
cloudletSpecification:
  cloudlet_pes: 16
  #cloudlet_length: 10_000     # WEB
  cloudlet_length: 3_550_000  # BATCH
  #cloudlet_length: -1  # this approach is no longer used
  #sim_total_work: -1   # this approach is no longer used (we can always work it out)
  #cloudlets: 100       # this approach is no longer used (now determined by app type)
#  cloudlet_utilisation: 1

# WEB or BATCH, determines which spec to pick up below
applicationType: BATCH

webAppSpecification:
  arrival_interval: 10
  # 1000 every 1 second results in too many cloudlets to log easily!
  # 500 every 1 second is roughly 50% capacity
  # implied (in code) - 1 cloudlet per VM
  # needs an end time!?

batchAppSpecification:
  # length needs to be the theoretical max processing capacity (57_600_000)
  # divided by number of cores (because each will contribute a share of total)
  # and then slightly smaller to ensure they all have time to finish
  # otherwise you end up with nothing finishing and zero work done!
  # ((57_600_000 / 16)-50000)
  cloudlet_count: 100